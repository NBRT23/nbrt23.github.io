<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gradient Background with Three.js</title>
    <style>
        body {
            margin: 0;
            height: 100vh;
            display: grid;
            grid-template-columns: 50% 50%;
            grid-template-rows: 50% 50%;
            background: black;
        }

        .gradient {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .top-right {
            top: 0;
            right: 0;
            background: linear-gradient(to bottom left, #410e63 25%, transparent 50%);
        }

        .bottom-left {
            bottom: 0;
            left: 0;
            background: linear-gradient(to top right, #04144b 25%, transparent 50%);
        }

        .cell {
            position: relative;
            overflow: hidden;
        }

        /* Style for the Three.js container */
        #threejs-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0; /* Behind the gradients */
        }
    </style>
</head>
<body>
    <div class="cell"></div>
    <div class="cell">
        <div class="gradient top-right"></div>
    </div>
    <div class="cell">
        <div class="gradient bottom-left"></div>
    </div>
    <div class="cell"></div>

    <!-- Container for Three.js -->
    <div id="threejs-container"></div>

    <script type="module">
        import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r155/three.module.min.js';
        import { OrbitControls } from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r155/examples/jsm/controls/OrbitControls.js';

        // Set up the scene, camera, and renderer
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000000); // Black background

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);

        // Append the Three.js canvas to the container
        document.getElementById('threejs-container').appendChild(renderer.domElement);

        // Create the gem-like geometry and material
        const geometry = new THREE.TetrahedronGeometry(1.5, 2);
        const material = new THREE.MeshPhongMaterial({
            color: 0xff0000,
            shininess: 100,
            specular: 0xffffff,
            transparent: true,
            opacity: 0.85
        });

        const gem = new THREE.Mesh(geometry, material);
        scene.add(gem);

        // Add lighting
        const ambientLight = new THREE.AmbientLight(0x404040, 2);
        scene.add(ambientLight);

        const pointLight = new THREE.PointLight(0xffffff, 1, 100);
        pointLight.position.set(5, 5, 5);
        scene.add(pointLight);

        // Add OrbitControls
        const controls = new OrbitControls(camera, renderer.domElement);

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            gem.rotation.y += 0.01;
            renderer.render(scene, camera);
        }
        animate();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
